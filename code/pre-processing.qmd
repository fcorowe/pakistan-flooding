---
title: "Mapping floiding data"
author: "Francisco Rowe"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(doParallel)
library(foreach)
library(sf)
```


```{r}
files_p <- data.frame( list.files("../data/population", full.names = T) )
names(files_p) <- "files_p"
files_p$check <- substr( files_p$files_p, 88, 102)
files_m <- data.frame( list.files( "../data/movement", full.names = T) )
names(files_m) <- "files_m"
files_m$check <- substr( files_m$files_m, 86, 100)
```

```{r}
checkfp <- list.files("../data/population", full.names = F)
checkfp <- substr( checkfp, 18, 32)
```

```{r}
checkfm <- list.files("../data/movement", full.names = F)
checkfm <- substr( checkfm, 18, 32)
```

```{r}
check <- data.frame( setdiff( checkfm, checkfp) )

names(check ) <- "check_date"

check <- check %>%
  separate( check_date, c("date", "hour"), "_") %>%
  mutate(
    lagged_hour = case_when(
      hour == "0800" ~ "1600",
      hour == "1600" ~ "0000",
      hour == "0000" ~ "0800"
    ),
    date = lubridate::ymd( date),
    lagged_date = case_when( hour == "1600" ~ date + 1,
                       hour != "1600" ~ date)
    )
```

```{r}
files_m <- files_m[ !files_m$check %in% paste0( check$lagged_date, "_", check$lagged_hour ), ]
```

```{r}
check <- setdiff( checkfp, checkfm)
```


```{r}
files_p <- files_p[ !files_p$check %in% "2020-08-05_0800",]
```


```{r}
files_p <- files_p$files_p
files_m <- files_m$files_m
```

```{r}
##load grid with classes
grid <-  st_read("../data/shp/gadm36_PAK.gpkg")
head(grid)
```


```{r}
cl <- parallel::makeCluster(3)
doParallel::registerDoParallel(cl)

foreach(i = seq( 1:length( files_p) - 1),.packages = c("tidyverse","lubridate","sf")) %dopar% {

pop <- read_csv( files_p[52], 
                 col_types = cols( date_time = col_character(), 
                                   polygon_id = col_character()))

mov <- read_csv( files_m[ 52 + 1], 
                 col_types = cols(date_time = col_character(), 
                                  start_polygon_id =  col_character(), 
                                  end_polygon_id = col_character()))

pop <- pop %>%
  filter(!is.na(n_crisis) & country=="PK") %>%
  mutate(
    #polygon_id = substr( polygon_id, 0, nchar(polygon_id) - 1),
    date_time = mov[ 1, ]$date_time ) %>%
  group_by( polygon_id, date_time ) %>%
  summarise( pop = sum( n_crisis),
            pop_baseline = sum( n_baseline))


mov <- mov %>%
  filter( country=="PK" & !is.na(n_crisis) ) %>%
  mutate(
    hour = substr( date_time, nchar( date_time) - 5, nchar( date_time) - 3),
    date = as.Date( strftime( date_time, "%Y-%m-%d", tz ="GMT")),
    wday = lubridate::wday( date_time, label = T),
    wd = ifelse( wday=="Sun"| wday =="Sat", 
                 "Weekend",
                 "Weekday")
    )


mov_pop <- mov %>%
  full_join( pop, 
             by = c( "start_polygon_id" = "polygon_id", "date_time" = "date_time")) %>%
  rename(
    start_pop = pop,
    start_pop_baseline = pop_baseline
  ) %>%
  inner_join( st_drop_geometry( grid[ c("NAME_2", "GID_2") ]), 
              by = c("start_polygon_id" = "GID_2" )) %>%
  inner_join( st_drop_geometry( grid[ c("NAME_2", "GID_2" )]), 
              by = c( "end_polygon_id" = "GID_2")) 

dt <- gsub("[[:space:]]", "_",mov[1,]$date_time)
dt <- gsub(":", "", dt)        
file_name <- paste0("../data/proccessed-data/movpop_", dt, ".rds")
saveRDS(mov_pop, file_name)

}
```





